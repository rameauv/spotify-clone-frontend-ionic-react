/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from './common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';

/**
 *
 * @export
 * @interface AlbumDto
 */
export interface AlbumDto {
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'releaseDate': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'thumbnailUrl': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'artistId': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'artistName': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'artistThumbnailUrl': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'albumType': string;
    /**
     *
     * @type {string}
     * @memberof AlbumDto
     */
    'likeId': string;
}

/**
 *
 * @export
 * @interface AlbumTracksDto
 */
export interface AlbumTracksDto {
    /**
     *
     * @type {Array<SimpleTrackDto>}
     * @memberof AlbumTracksDto
     */
    'items': Array<SimpleTrackDto>;
    /**
     *
     * @type {number}
     * @memberof AlbumTracksDto
     */
    'limit': number;
    /**
     *
     * @type {number}
     * @memberof AlbumTracksDto
     */
    'offset': number;
    /**
     *
     * @type {number}
     * @memberof AlbumTracksDto
     */
    'total': number;
}

/**
 *
 * @export
 * @interface ArtistDto
 */
export interface ArtistDto {
    /**
     *
     * @type {string}
     * @memberof ArtistDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ArtistDto
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ArtistDto
     */
    'thumbnailUrl': string;
    /**
     *
     * @type {string}
     * @memberof ArtistDto
     */
    'likeId': string;
    /**
     *
     * @type {number}
     * @memberof ArtistDto
     */
    'monthlyListeners': number;
}

/**
 *
 * @export
 * @interface ArtistSearchResultDto
 */
export interface ArtistSearchResultDto {
    /**
     *
     * @type {string}
     * @memberof ArtistSearchResultDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ArtistSearchResultDto
     */
    'thumbnailUrl': string;
    /**
     *
     * @type {number}
     * @memberof ArtistSearchResultDto
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof ArtistSearchResultDto
     */
    'name': string;
}

/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'password'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateUserDto
     */
    'data'?: string | null;
}

/**
 *
 * @export
 * @interface CurrentUserDto
 */
export interface CurrentUserDto {
    /**
     *
     * @type {string}
     * @memberof CurrentUserDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CurrentUserDto
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof CurrentUserDto
     */
    'name': string;
}

/**
 *
 * @export
 * @interface ErrorDto
 */
export interface ErrorDto {
    /**
     *
     * @type {string}
     * @memberof ErrorDto
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof ErrorDto
     */
    'title': string;
    /**
     *
     * @type {number}
     * @memberof ErrorDto
     */
    'status': number;
    /**
     *
     * @type {string}
     * @memberof ErrorDto
     */
    'details': string;
    /**
     *
     * @type {string}
     * @memberof ErrorDto
     */
    'instance': string;
}

/**
 *
 * @export
 * @interface ErrorsDto
 */
export interface ErrorsDto {
    /**
     *
     * @type {Array<ErrorDto>}
     * @memberof ErrorsDto
     */
    'errors': Array<ErrorDto>;
}

/**
 *
 * @export
 * @interface LikeDto
 */
export interface LikeDto {
    /**
     *
     * @type {string}
     * @memberof LikeDto
     */
    'id': string;
}

/**
 *
 * @export
 * @interface LoginCredentialsDto
 */
export interface LoginCredentialsDto {
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDto
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDto
     */
    'password'?: string | null;
}

/**
 *
 * @export
 * @interface NewAccessTokenDto
 */
export interface NewAccessTokenDto {
    /**
     *
     * @type {string}
     * @memberof NewAccessTokenDto
     */
    'accessToken': string;
}

/**
 *
 * @export
 * @interface ReleaseSearchResultDto
 */
export interface ReleaseSearchResultDto {
    /**
     *
     * @type {string}
     * @memberof ReleaseSearchResultDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ReleaseSearchResultDto
     */
    'thumbnailUrl': string;
    /**
     *
     * @type {number}
     * @memberof ReleaseSearchResultDto
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof ReleaseSearchResultDto
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ReleaseSearchResultDto
     */
    'artistName': string;
}

/**
 *
 * @export
 * @interface SearchResultDto
 */
export interface SearchResultDto {
    /**
     *
     * @type {Array<ReleaseSearchResultDto>}
     * @memberof SearchResultDto
     */
    'albumResult': Array<ReleaseSearchResultDto>;
    /**
     *
     * @type {Array<SongSearchResultDto>}
     * @memberof SearchResultDto
     */
    'songResult': Array<SongSearchResultDto>;
    /**
     *
     * @type {Array<ArtistSearchResultDto>}
     * @memberof SearchResultDto
     */
    'artistResult': Array<ArtistSearchResultDto>;
}

/**
 *
 * @export
 * @interface SetNameRequestDto
 */
export interface SetNameRequestDto {
    /**
     *
     * @type {string}
     * @memberof SetNameRequestDto
     */
    'name'?: string | null;
}

/**
 *
 * @export
 * @interface SimpleTrackDto
 */
export interface SimpleTrackDto {
    /**
     *
     * @type {string}
     * @memberof SimpleTrackDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SimpleTrackDto
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof SimpleTrackDto
     */
    'artistName': string;
}

/**
 *
 * @export
 * @interface SongSearchResultDto
 */
export interface SongSearchResultDto {
    /**
     *
     * @type {string}
     * @memberof SongSearchResultDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SongSearchResultDto
     */
    'thumbnailUrl': string;
    /**
     *
     * @type {number}
     * @memberof SongSearchResultDto
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof SongSearchResultDto
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof SongSearchResultDto
     */
    'artistName': string;
}

/**
 *
 * @export
 * @interface TrackDto
 */
export interface TrackDto {
    /**
     *
     * @type {string}
     * @memberof TrackDto
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TrackDto
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof TrackDto
     */
    'artistName': string;
    /**
     *
     * @type {string}
     * @memberof TrackDto
     */
    'thumbnailUrl': string;
    /**
     *
     * @type {string}
     * @memberof TrackDto
     */
    'likeId': string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Logs in a user
         * @param {LoginCredentialsDto} [loginCredentialsDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginPost: async (loginCredentialsDto?: LoginCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Accounts/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCredentialsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logs out the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Accounts/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Refreshes the access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRefreshAccessTokenPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Accounts/RefreshAccessToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Registers a new user
         * @param {CreateUserDto} [createUserDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegisterPost: async (createUserDto?: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Accounts/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Logs in a user
         * @param {LoginCredentialsDto} [loginCredentialsDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLoginPost(loginCredentialsDto?: LoginCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewAccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLoginPost(loginCredentialsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Logs out the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Refreshes the access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRefreshAccessTokenPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewAccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRefreshAccessTokenPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Registers a new user
         * @param {CreateUserDto} [createUserDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegisterPost(createUserDto?: CreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegisterPost(createUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         *
         * @summary Logs in a user
         * @param {LoginCredentialsDto} [loginCredentialsDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginPost(loginCredentialsDto?: LoginCredentialsDto, options?: any): AxiosPromise<NewAccessTokenDto> {
            return localVarFp.accountsLoginPost(loginCredentialsDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Logs out the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.accountsLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Refreshes the access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRefreshAccessTokenPost(options?: any): AxiosPromise<NewAccessTokenDto> {
            return localVarFp.accountsRefreshAccessTokenPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Registers a new user
         * @param {CreateUserDto} [createUserDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegisterPost(createUserDto?: CreateUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.accountsRegisterPost(createUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     *
     * @summary Logs in a user
     * @param {LoginCredentialsDto} [loginCredentialsDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLoginPost(loginCredentialsDto?: LoginCredentialsDto, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLoginPost(loginCredentialsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Logs out the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLogoutPost(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Refreshes the access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRefreshAccessTokenPost(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRefreshAccessTokenPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Registers a new user
     * @param {CreateUserDto} [createUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegisterPost(createUserDto?: CreateUserDto, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegisterPost(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlbumApi - axios parameter creator
 * @export
 */
export const AlbumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get the album by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('albumIdGet', 'id', id)
            const localVarPath = `/Album/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set the like status for the album
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumIdLikePatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('albumIdLikePatch', 'id', id)
            const localVarPath = `/Album/{id}/Like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the associated tracks of an album
         * @param {string} id
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumIdTracksGet: async (id: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('albumIdTracksGet', 'id', id)
            const localVarPath = `/Album/{id}/Tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumApi - functional programming interface
 * @export
 */
export const AlbumApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get the album by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albumIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albumIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set the like status for the album
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albumIdLikePatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albumIdLikePatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get the associated tracks of an album
         * @param {string} id
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albumIdTracksGet(id: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumTracksDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albumIdTracksGet(id, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlbumApi - factory interface
 * @export
 */
export const AlbumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumApiFp(configuration)
    return {
        /**
         *
         * @summary Get the album by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumIdGet(id: string, options?: any): AxiosPromise<AlbumDto> {
            return localVarFp.albumIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set the like status for the album
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumIdLikePatch(id: string, options?: any): AxiosPromise<LikeDto> {
            return localVarFp.albumIdLikePatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the associated tracks of an album
         * @param {string} id
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumIdTracksGet(id: string, limit?: number, offset?: number, options?: any): AxiosPromise<AlbumTracksDto> {
            return localVarFp.albumIdTracksGet(id, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumApi - object-oriented interface
 * @export
 * @class AlbumApi
 * @extends {BaseAPI}
 */
export class AlbumApi extends BaseAPI {
    /**
     *
     * @summary Get the album by its id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public albumIdGet(id: string, options?: AxiosRequestConfig) {
        return AlbumApiFp(this.configuration).albumIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set the like status for the album
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public albumIdLikePatch(id: string, options?: AxiosRequestConfig) {
        return AlbumApiFp(this.configuration).albumIdLikePatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get the associated tracks of an album
     * @param {string} id
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public albumIdTracksGet(id: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return AlbumApiFp(this.configuration).albumIdTracksGet(id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ArtistApi - axios parameter creator
 * @export
 */
export const ArtistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get the artist by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('artistIdGet', 'id', id)
            const localVarPath = `/Artist/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set a like for the artist
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistIdLikePatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('artistIdLikePatch', 'id', id)
            const localVarPath = `/Artist/{id}/Like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtistApi - functional programming interface
 * @export
 */
export const ArtistApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtistApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get the artist by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set a like for the artist
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistIdLikePatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistIdLikePatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArtistApi - factory interface
 * @export
 */
export const ArtistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtistApiFp(configuration)
    return {
        /**
         *
         * @summary Get the artist by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistIdGet(id: string, options?: any): AxiosPromise<ArtistDto> {
            return localVarFp.artistIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set a like for the artist
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistIdLikePatch(id: string, options?: any): AxiosPromise<LikeDto> {
            return localVarFp.artistIdLikePatch(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtistApi - object-oriented interface
 * @export
 * @class ArtistApi
 * @extends {BaseAPI}
 */
export class ArtistApi extends BaseAPI {
    /**
     *
     * @summary Get the artist by its id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistApi
     */
    public artistIdGet(id: string, options?: AxiosRequestConfig) {
        return ArtistApiFp(this.configuration).artistIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set a like for the artist
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistApi
     */
    public artistIdLikePatch(id: string, options?: AxiosRequestConfig) {
        return ArtistApiFp(this.configuration).artistIdLikePatch(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LikeApi - axios parameter creator
 * @export
 */
export const LikeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Delete a like of the current user by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeIdDeleteDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('likeIdDeleteDelete', 'id', id)
            const localVarPath = `/Like/{id}/Delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LikeApi - functional programming interface
 * @export
 */
export const LikeApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = LikeApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Delete a like of the current user by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeIdDeleteDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likeIdDeleteDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LikeApi - factory interface
 * @export
 */
export const LikeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LikeApiFp(configuration)
    return {
        /**
         *
         * @summary Delete a like of the current user by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeIdDeleteDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.likeIdDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LikeApi - object-oriented interface
 * @export
 * @class LikeApi
 * @extends {BaseAPI}
 */
export class LikeApi extends BaseAPI {
    /**
     *
     * @summary Delete a like of the current user by its id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApi
     */
    public likeIdDeleteDelete(id: string, options?: AxiosRequestConfig) {
        return LikeApiFp(this.configuration).likeIdDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} q
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {string} [types] A comma-separated list of item types to search across. Search results include hits from all the specified item types. For example: \&quot;album,track\&quot; returns both albums and tracks\&quot;.  Valid values: artist, album, track  If omitted search for every categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchGet: async (q: string, offset?: number, limit?: number, types?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('searchSearchGet', 'q', q)
            const localVarPath = `/Search/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} q
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {string} [types] A comma-separated list of item types to search across. Search results include hits from all the specified item types. For example: \&quot;album,track\&quot; returns both albums and tracks\&quot;.  Valid values: artist, album, track  If omitted search for every categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSearchGet(q: string, offset?: number, limit?: number, types?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSearchGet(q, offset, limit, types, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         *
         * @param {string} q
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {string} [types] A comma-separated list of item types to search across. Search results include hits from all the specified item types. For example: \&quot;album,track\&quot; returns both albums and tracks\&quot;.  Valid values: artist, album, track  If omitted search for every categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchGet(q: string, offset?: number, limit?: number, types?: string, options?: any): AxiosPromise<SearchResultDto> {
            return localVarFp.searchSearchGet(q, offset, limit, types, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     *
     * @param {string} q
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [types] A comma-separated list of item types to search across. Search results include hits from all the specified item types. For example: \&quot;album,track\&quot; returns both albums and tracks\&quot;.  Valid values: artist, album, track  If omitted search for every categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchSearchGet(q: string, offset?: number, limit?: number, types?: string, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchSearchGet(q, offset, limit, types, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrackApi - axios parameter creator
 * @export
 */
export const TrackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get the track by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trackIdGet', 'id', id)
            const localVarPath = `/Track/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set a like for the track
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackIdLikePatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trackIdLikePatch', 'id', id)
            const localVarPath = `/Track/{id}/Like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrackApi - functional programming interface
 * @export
 */
export const TrackApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TrackApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get the track by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set a like for the track
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackIdLikePatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackIdLikePatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrackApi - factory interface
 * @export
 */
export const TrackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrackApiFp(configuration)
    return {
        /**
         *
         * @summary Get the track by its id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackIdGet(id: string, options?: any): AxiosPromise<TrackDto> {
            return localVarFp.trackIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set a like for the track
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackIdLikePatch(id: string, options?: any): AxiosPromise<LikeDto> {
            return localVarFp.trackIdLikePatch(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrackApi - object-oriented interface
 * @export
 * @class TrackApi
 * @extends {BaseAPI}
 */
export class TrackApi extends BaseAPI {
    /**
     *
     * @summary Get the track by its id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackApi
     */
    public trackIdGet(id: string, options?: AxiosRequestConfig) {
        return TrackApiFp(this.configuration).trackIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set a like for the track
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackApi
     */
    public trackIdLikePatch(id: string, options?: AxiosRequestConfig) {
        return TrackApiFp(this.configuration).trackIdLikePatch(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCurrentUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/CurrentUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set the current user\'s profile name
         * @param {SetNameRequestDto} [setNameRequestDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userNamePatch: async (setNameRequestDto?: SetNameRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/Name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setNameRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCurrentUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCurrentUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set the current user\'s profile name
         * @param {SetNameRequestDto} [setNameRequestDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userNamePatch(setNameRequestDto?: SetNameRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userNamePatch(setNameRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         *
         * @summary Get the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCurrentUserGet(options?: any): AxiosPromise<CurrentUserDto> {
            return localVarFp.userCurrentUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set the current user\'s profile name
         * @param {SetNameRequestDto} [setNameRequestDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userNamePatch(setNameRequestDto?: SetNameRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.userNamePatch(setNameRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     *
     * @summary Get the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userCurrentUserGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userCurrentUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Set the current user\'s profile name
     * @param {SetNameRequestDto} [setNameRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userNamePatch(setNameRequestDto?: SetNameRequestDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userNamePatch(setNameRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


